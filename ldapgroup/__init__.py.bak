#!/usr/bin/python
# vim: ts=4 sw=4 expandtab smartindent filetype=python

domain = 'DC=services,DC=fnal,DC=gov'
# domain = 'DC=fermitest,DC=fnal,DC=gov'

#from ldap_groups import ADGroup

import sys, os
import ldap_groups
import ConfigParser
import ldap
import ldap.filter
import ldap.modlist as modlist
import argparse
import yaml
from pprint import pprint


NAME_ATTRIBUTE = "name"
TYPE_ATTRIBUTE = "objectClass"

class SSIGroupNotEmptyError(Exception):
    pass

class SSIUserExistsError(Exception):
    pass

class SSICannotBindError(Exception):
    pass

class SSICannotCreateGroupError(Exception):
    pass

class SSICannotAddUserError(Exception):
    pass

class SSIMultipleUserMatchError(Exception):
    pass

def user_exists(username):

    try:
        lconn = ldap.initialize(SERVER_URI)
        lconn.simple_bind_s(BIND_DN, BIND_PASSWORD)
    except Exception, e:
        raise

    user_dn="CN=%s,OU=FermiUsers,%s" % (username, domain)

    try:
        result=lconn.search_s(BASE_DN, ldap.SCOPE_SUBTREE, "(&(objectClass=person)(cn=%s))" % username )
        if len(result) == 1: return True
        if len(result) > 1: raise SSIMultipleUserMatchError
        return False
    except:
        raise

def group_exists(groupname, ldap_config):
    c=ConfigParser.RawConfigParser()
    c.read(ldap_config)

    # group_dn="CN=%s,OU=Harbor,OU=FermiGroups,DC=services,DC=fnal,DC=gov" % groupname
    group_dn = "CN=%s,%s" % (groupname, c.get('main', 'group_dn_suffix'))
    try:
        group=ldap_groups.ADGroup(group_dn, SERVER_URI, BASE_DN, None, None, BIND_DN, BIND_PASSWORD )
        return True
    except Exception, e:
        return False


class ADGroupFlex(object):
    def __init__(self, group_name, config_file):

        self.config=ConfigParser.RawConfigParser()
        self.config.read(config_file)

        self.config_file=config_file
        self.group_name=group_name
        self.server_uri=self.config.get('main','server_uri')
        self.base_dn=self.config.get('main','base_dn')
        self.bind_dn=self.config.get('main','bind_dn')
        self.bind_password=self.config.get('main','bind_password')
        self.group_dn_suffix=self.config.get('main','group_dn_suffix')

        self.group_dn="CN=%s,%s" % (self.group_name, self.group_dn_suffix)

        if not self.group_exists(config_file):
            self.__ldap_add_group()

        try:
            self.group=ldap_groups.ADGroup(self.group_dn, self.server_uri, self.base_dn, None, None, self.bind_dn, self.bind_password )
        except Exception, e:
            raise


    def get_attributes(self):
        return self.group.get_attributes()

    def is_empty(self):
        attributes=self.group.get_attributes()
        if attributes.has_key('member'):
            return False
        else:
            return True

    def group_exists(self, ldap_config):

        try:
            group=ldap_groups.ADGroup(self.group_dn, self.server_uri, self.base_dn, None, None, self.bind_dn, self.bind_password )
            return True
        except Exception, e:
            return False


    def get_users(self):
        if not self.is_empty(): return self.group.get_attributes()['member']

    def list_users(self):
        if self.is_empty(): return

        for member in self.get_users():
            #print member
            print member.split(',')[0].split('=')[1]


    def has_user(self,user):
        userblob="CN=%s,OU=FermiUsers,%s" % (user, domain)
        if self.is_empty(): return False

        if userblob in self.group.get_attributes()['member']:
            return True
        else:
            return False

    # remove users from group
    def empty_group(self):
        if self.is_empty(): return True

        for user in self.group.get_attributes()['member']:
            tmp=user.split(',')
            usercn=tmp[0].split('=')[1]
            self.group.remove_member(usercn)

    def add_member(self,user):
        if not self.has_user(user):
            try:
                self.group.add_member(user)
            except:
                raise
        else:
            raise SSIUserExistsError

    def remove_member(self,user):
        if self.has_user(user):
            self.group.remove_member(user)

    def get_group_member_info(self):
        return self.group.get_member_info()

    def get_attributes(self):
        return self.group.get_attributes()

    def get_name(self):
        return self.group.get_attribute(NAME_ATTRIBUTE)

    def get_type(self):
        return self.group.get_attribute(TYPE_ATTRIBUTE)

    # This is sloppy, but it works
    def __ldap_add_group(self):

        try:
            lconn = ldap.initialize(self.server_uri)
        except Exception, e:
            print "Initialize failed"
            print e
            raise
        #except ldap.LDAPError, e:
        #    raise

        try:
            lconn.simple_bind_s(self.bind_dn, self.bind_password)
        except Exception, e:
            print "bind failed"
            print e
            raise

        #groupdn="cn=%s,OU=Harbor,OU=FermiGroups,%s" % (groupname, domain)

        attrs = {}
        attrs['objectclass'] = ['top', 'group']
        attrs['cn'] = self.group_name
        attrs['objectCategory'] = 'CN=Group,CN=Schema,CN=Configuration,%s' % (domain)
        ldif = modlist.addModlist(attrs)
        try:
            lconn.add_s(self.group_dn, ldif)
        except:
            raise

    # This is sloppy, but it works
    def delete_group(self):
        if not self.is_empty():
            raise SSIGroupNotEmptyError

        try:
            lconn = ldap.initialize(self.server_uri)
            lconn.simple_bind_s(self.bind_dn, self.bind_password)
        except ldap.LDAPError, e:
            print "Error binding to ldap:"
            print e
            sys.exit(1)

        try:
            lconn.delete_s(self.group_dn)
        except Exception, e:
            print "Error deleting group"
            print e

        return True
