#!/usr/bin/python

#########################################################################
### Configuration #######################################################
#########################################################################

config_file = '/etc/ldapgroup/config.yaml'
description = 'add a user to a specified LDAP group'
group_name = None

#########################################################################
### Declarations ########################################################
#########################################################################

import argparse
import ldapgroup
import sys

#########################################################################
### main () #############################################################
#########################################################################

parser = argparse.ArgumentParser(description=description)
parser.add_argument('group_name', type=str, help="group name")
parser.add_argument('user_name', type=str, help="user name")
parser.add_argument('--config', dest='config', type=str,
    default=config_file, help="alternate config file")

args = parser.parse_args()

config = ldapgroup.config_yaml(args.config)

group_name = args.group_name
user_name = args.group_name
try:
    connection = ldapgroup.connect(group_name=group_name, config=config)
except Exception, e:
    print "failed to connect as %s: %s" % (group_name, e)
    sys.exit(-1)


ldap_config='/etc/ssi/ldap.cfg'

groupName=args.group

if LDAPGroup.group_exists(groupName, ldap_config):
    print "Group '%s' already exists" % groupName
    sys.exit(1)

try:
    newgroup=LDAPGroup.ADGroupFlex(groupName, ldap_config)
    print "Group '%s' created" % groupName
    sys.exit(0)
except Exception, e:
    print "Failed to create group '%s'. Error:\n" % groupName
    print e
    sys.exit(1)
